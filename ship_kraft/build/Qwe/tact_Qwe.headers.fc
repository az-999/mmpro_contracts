;;
;; Header files for Qwe
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $WithdrawFunds$_load
(slice, ((int))) $WithdrawFunds$_load(slice sc_0) inline;

;; $WithdrawalConfirmation$_store
builder $WithdrawalConfirmation$_store(builder build_0, (int, int) v) inline;

;; $WithdrawalConfirmation$_store_cell
cell $WithdrawalConfirmation$_store_cell((int, int) v) inline;

;; $VerifySingle$_load
(slice, ((int, slice))) $VerifySingle$_load(slice sc_0) inline;

;; $UpdatePublicKey$_load
(slice, ((int, int))) $UpdatePublicKey$_load(slice sc_0) inline;

;; $AssembleShipMessage$_load
(slice, ((slice, slice, slice, slice, slice, slice, int, slice))) $AssembleShipMessage$_load(slice sc_0) inline_ref;

;; $UpgradeShip$_load
(slice, ((slice, slice, slice, slice, slice, slice, slice, int, slice))) $UpgradeShip$_load(slice sc_0) inline_ref;

;; $MintNFT$_load
(slice, ((int))) $MintNFT$_load(slice sc_0) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (slice, int, int) v) inline;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((slice, int, int) v) inline;

;; $BurnNFT$_store
builder $BurnNFT$_store(builder build_0, tuple v) inline;

;; $BurnNFT$_store_cell
cell $BurnNFT$_store_cell(tuple v) inline;

;; $BurnSingle$_load
(slice, ((slice))) $BurnSingle$_load(slice sc_0) inline;

;; $Qwe$_store
builder $Qwe$_store(builder build_0, (slice, slice, int, cell, cell) v) inline;

;; $Qwe$_load
(slice, ((slice, slice, int, cell, cell))) $Qwe$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $Qwe$init$_load
(slice, ((slice, slice, int, cell, cell))) $Qwe$init$_load(slice sc_0) inline;

;; $ShipNFT$init$_store
builder $ShipNFT$init$_store(builder build_0, (slice, int, slice, cell) v) inline;

;; $Qwe$_contract_init
(slice, slice, int, cell, cell) $Qwe$_contract_init(slice $owner_address, slice $collection_address, int $owner_public_key, cell $collection_metadata, cell $nft_item_metadata) impure inline_ref;

;; $Qwe$_contract_load
(slice, slice, int, cell, cell) $Qwe$_contract_load() impure inline_ref;

;; $Qwe$_contract_store
() $Qwe$_contract_store((slice, slice, int, cell, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Qwe$_fun_verifySignature
((slice, slice, int, cell, cell), int) $Qwe$_fun_verifySignature((slice, slice, int, cell, cell) $self, int $ship_level, slice $signature) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline;

;; $BurnNFT$_constructor_
(tuple) $BurnNFT$_constructor_() inline;

;; $Qwe$_fun_burnNFT
((slice, slice, int, cell, cell), ()) $Qwe$_fun_burnNFT((slice, slice, int, cell, cell) $self, slice $nft_contract) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body_code_data(slice $to, int $value, int $bounce, cell $body, cell $code, cell $data) inline;

;; $Transfer$_constructor_new_owner_forward_amount_query_id
((slice, int, int)) $Transfer$_constructor_new_owner_forward_amount_query_id(slice $new_owner, int $forward_amount, int $query_id) inline;

;; $ShipNFT$_init_child
(cell, cell) $ShipNFT$_init_child(cell sys', slice $collection_address, int $item_index, slice $owner, cell $content) inline_ref;

;; $Qwe$_fun_getNewNftItemInit
((slice, slice, int, cell, cell), (cell, cell)) $Qwe$_fun_getNewNftItemInit((slice, slice, int, cell, cell) $self, int $item_index) impure inline_ref;

;; $Qwe$_fun_mintShip
((slice, slice, int, cell, cell), ()) $Qwe$_fun_mintShip((slice, slice, int, cell, cell) $self, slice $sender, int $msgValue, cell $content, int $ship_level) impure inline_ref;

;; $Qwe$_fun_getOwner
((slice, slice, int, cell, cell), slice) $Qwe$_fun_getOwner((slice, slice, int, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Qwe$_fun_forward
((slice, slice, int, cell, cell), ()) $Qwe$_fun_forward((slice, slice, int, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Qwe$_fun_notify
((slice, slice, int, cell, cell), ()) $Qwe$_fun_notify((slice, slice, int, cell, cell) $self, cell $body) impure inline;

;; $WithdrawalConfirmation$_constructor_query_id_amount
((int, int)) $WithdrawalConfirmation$_constructor_query_id_amount(int $query_id, int $amount) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
